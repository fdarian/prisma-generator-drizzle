generator drizzle {
  provider = "bunx prisma-generator-drizzle"
}

datasource db {
  provider = "postgresql"
  url      = env("VITE_PG_DATABASE_URL")
}

model SelfReference {
  id String @id

  referringManyId String?
  referringMany   SelfReference?  @relation("SelfReference_referringMany", fields: [referringManyId], references: [id])
  referredMany    SelfReference[] @relation("SelfReference_referringMany")

  referringUniqueId String?        @unique
  referringUnique   SelfReference? @relation("SelfReference_referringUnique", fields: [referringUniqueId], references: [id])
  referredUnique    SelfReference? @relation("SelfReference_referringUnique")
}

// #region Implicit relationship purposes

model TransactionHeader {
  id       String          @id
  products ProductDetail[]
}

model ProductDetail {
  id           String              @id
  transactions TransactionHeader[]
}

// With custom table name
model Post {
  id         String     @id
  categories Category[] @relation("CustomCategoryToPost")
}

model Category {
  id    String @id
  posts Post[] @relation("CustomCategoryToPost")
}

// #endregion

// #region Ignore

model IgnoredModel {
  id String @id @default(uuid())

  @@ignore
}

model ModelWithIgnoredField {
  id              String @id @default(uuid())
  shouldBeIgnored String @ignore
}

// #endregion

// #region Default
// start -sqlite
enum EnumForDefault {
  TypeOne
  TypeTwo
}

// end -sqlite

model Default {
  id        String    @id
  /// drizzle.default @paralleldrive/cuid2::createId
  alsoId    String?
  /// drizzle.default crypto::randomBytes `() => randomBytes(16).toString('hex')`
  salt      String?
  pgUuid    String?   @default(dbgenerated("gen_random_uuid()")) // -sqlite -mysql
  date      DateTime? @default("2024-01-23T00:00:00Z")
  int       Int?      @default(1)
  boolean   Boolean?  @default(true)
  createdAt DateTime? @default(now())
  string    String?   @default("John")
  bigint    BigInt?   @default(1)
  decimal   Decimal?  @default(1.123)
  float     Float?    @default(1.123)
  bytes     Bytes?    @default("aGVsbG8gd29ybGQ=")

  enum EnumForDefault @default(TypeTwo) // -sqlite
  json Json?          @default("{\"foo\": \"bar\"}") // -sqlite

  stringList String[] @default(["John", "Doe"]) // -sqlite -mysql
}

model AutoIncrement {
  id  Int    @id @default(autoincrement())
  ref String @unique
}

model AutoIncrementBigInt {
  id  BigInt @id @default(autoincrement())
  ref String @unique
}

// #endregion

// #region Field

// start -sqlite
enum Enum {
  A
  B
}

// end -sqlite

model Field {
  id         String    @id
  string     String?
  boolean    Boolean?
  int        Int?
  bigint     BigInt?
  float      Float?
  decimal    Decimal?
  datetime   DateTime?
  stringList String[] // -mysql -sqlite
  bytes      Bytes?
  json       Json? // -sqlite
  enum       Enum? // -sqlite
}

// #endregion

// #region one to many
model OneToMany_One {
  id     String         @id
  manyId String
  many   OneToMany_Many @relation(fields: [manyId], references: [id])
}

model OneToMany_Many {
  id   String          @id
  ones OneToMany_One[]
}

// #endregion

// #region one to one
model OneToOne_A {
  id  String      @id
  b   OneToOne_B? @relation(fields: [bId], references: [id])
  bId String?     @unique
}

model OneToOne_B {
  id String      @id
  a  OneToOne_A?
  c  OneToOne_C?
}

model OneToOne_C {
  id  String     @id
  b   OneToOne_B @relation(fields: [bId], references: [id])
  bId String     @unique
}

// #endregion

// #region Disambiguating
model Disambiguating_Transfer {
  id          String               @id
  from        Disambiguating_User  @relation("Disambiguating_Transfer_from", fields: [fromId], references: [id])
  fromId      String
  to          Disambiguating_User  @relation("Disambiguating_Transfer_to", fields: [toId], references: [id])
  toId        String
  salePayment Disambiguating_Sale? @relation("Disambiguating_Sale_payment")
  saleTax     Disambiguating_Sale? @relation("Disambiguating_Sale_tax")
  createdAt   DateTime             @default(now())
}

model Disambiguating_User {
  id String @id

  receivedTransfers Disambiguating_Transfer[] @relation("Disambiguating_Transfer_to")
  sentTransfers     Disambiguating_Transfer[] @relation("Disambiguating_Transfer_from")
}

model Disambiguating_Sale {
  id        String                  @id
  payment   Disambiguating_Transfer @relation("Disambiguating_Sale_payment", fields: [paymentId], references: [id])
  paymentId String                  @unique
  tax       Disambiguating_Transfer @relation("Disambiguating_Sale_tax", fields: [taxId], references: [id])
  taxId     String                  @unique
}

// #endregion

// #region https://github.com/farreldarian/prisma-generator-drizzle/issues/55

model Disambiguating_Country {
  id         String                    @id @default(cuid())
  currencies Disambiguating_Currency[]
}

model Disambiguating_Currency {
  code      String                   @id @unique
  countries Disambiguating_Country[]
}

// #endregion

model FieldCustomization {
  id        Int    @id @default(autoincrement())
  /// drizzle.custom {
  ///   "imports": [{ "name": ["SomeBigInt"], "module": "~/tests/shared/testFieldCustomization", "type": true }],
  ///   "$type": "SomeBigInt",
  ///   "default": "() => 1n",
  ///   "field": { "mode": "number" }
  /// }
  allFields BigInt
}
